# @package _global_

sampling_rate: 16000
length: 65536
log_every_n_steps: 1000
channels: 1

model:
  _target_: main.module_qe.Model
  lr: 1e-4
  lr_beta1: 0.95
  lr_beta2: 0.999
  lr_eps: 1e-6
  lr_weight_decay: 1e-3
  sample_rate: ${sampling_rate}
  quantizer_loss_weight: 1.0
  loss_type: mrstft

  autoencoder:
    _target_: audio_diffusion_pytorch.AutoEncoder1d
    in_channels: ${channels}
    channels: 256
    patch_factor: 32
    patch_blocks: 1
    resnet_groups: 8
    multipliers: [1, 1, 2, 2]
    factors: [2, 4, 4]
    num_blocks: [8, 8, 8, 8]
    bottleneck:
      _target_: quantizer_pytorch.quantizer.MQ1d
      channels: 512
      codebook_size: 4096
      num_overlaps: 2
      temperature: 5.0


datamodule:
  _target_: main.module_upsampler.Datamodule
  dataset:
    _target_: torch.utils.data.ConcatDataset
    datasets:
      - _target_: audio_data_pytorch.LibriSpeechDataset
        root: ${data_dir}
        transforms:
          _target_: audio_data_pytorch.AllTransform
          source_rate: 16000
          target_rate: ${sampling_rate}
          random_crop_size: ${length}
      - _target_: audio_data_pytorch.CommonVoiceDataset
        auth_token: ${oc.env:HUGGINGFACE_TOKEN}
        root: ${data_dir}
        version: 8
        languages: ["en"]
        transforms:
          _target_: audio_data_pytorch.AllTransform
          source_rate: 48000
          mono: True
          target_rate: ${sampling_rate}
          random_crop_size: ${length}
  val_split: 0.0001
  batch_size: 64
  num_workers: 8
  pin_memory: True

callbacks:
  rich_progress_bar:
    _target_: pytorch_lightning.callbacks.RichProgressBar

  model_checkpoint:
    _target_: pytorch_lightning.callbacks.ModelCheckpoint
    monitor: "valid_loss"   # name of the logged metric which determines when model is improving
    save_top_k: 1           # save k best models (determined by above metric)
    save_last: True         # additionaly always save model from last epoch
    mode: "min"             # can be "max" or "min"
    verbose: False
    dirpath: ${logs_dir}/ckpts/${now:%Y-%m-%d-%H-%M-%S}
    filename: '{epoch:02d}-{valid_loss:.3f}'

  model_summary:
    _target_: pytorch_lightning.callbacks.RichModelSummary
    max_depth: 2

  audio_samples_logger:
    _target_: main.module_qe.SampleLogger
    num_items: 2
    channels: ${channels}
    sampling_rate: ${sampling_rate}
    length: ${length}

loggers:
  wandb:
    _target_: pytorch_lightning.loggers.wandb.WandbLogger
    project: ${oc.env:WANDB_PROJECT}
    entity: ${oc.env:WANDB_ENTITY}
    # offline: False  # set True to store all logs only locally
    job_type: "train"
    group: ""
    save_dir: ${logs_dir}

trainer:
  _target_: pytorch_lightning.Trainer
  gpus: 0 # Set `1` to train on GPU, `0` to train on CPU only, and `-1` to train on all GPUs, default `0`
  precision: 32 # Precision used for tensors, default `32`
  accelerator: null # `ddp` GPUs train individually and sync gradients, default `None`
  min_epochs: 0
  max_epochs: -1
  enable_model_summary: False
  log_every_n_steps: 1 # Logs metrics every N batches
  check_val_every_n_epoch: null
  val_check_interval: ${log_every_n_steps}
